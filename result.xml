<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="4" failures="0" skipped="0" tests="4" time="300.459" timestamp="2021-11-06T14:53:00.219568" hostname="fv-az77-654"><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_is_git_repo_list_available" time="300.136"><error message="failed on setup with &quot;KeyError: 'status'&quot;">@pytest.fixture(scope="session")
    def web_driver() -&gt; webdriver:
&gt;       web_driver = DriverFactory.get_web_driver(DRIVER_TYPE)

tests/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
utilities/driver/driver_factory.py:86: in get_web_driver
    return DriverFactory.__get_edge_driver(DriverFactory.__edge_options_default(options))
utilities/driver/driver_factory.py:63: in __get_edge_driver
    driver = webdriver.Remote(command_executor=HTTP_LOCALHOST_WD_HUB,
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ac084f850&gt;
response = {'status': 500, 'value': '{\n  "value": {\n    "additionalInformation": "Driver info: driver.version: unknown",\n    "... out",\n    "buildInformation": {\n      "buildRevision": "3a21814679",\n      "releaseLabel": "4.0.0"\n    }\n  }\n}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
&gt;                       status = value["status"]
E                       KeyError: 'status'

../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:130: KeyError</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_create_new_repo" time="0.001"><error message="failed on setup with &quot;KeyError: 'status'&quot;">@pytest.fixture(scope="session")
    def web_driver() -&gt; webdriver:
&gt;       web_driver = DriverFactory.get_web_driver(DRIVER_TYPE)

tests/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
utilities/driver/driver_factory.py:86: in get_web_driver
    return DriverFactory.__get_edge_driver(DriverFactory.__edge_options_default(options))
utilities/driver/driver_factory.py:63: in __get_edge_driver
    driver = webdriver.Remote(command_executor=HTTP_LOCALHOST_WD_HUB,
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ac084f850&gt;
response = {'status': 500, 'value': '{\n  "value": {\n    "additionalInformation": "Driver info: driver.version: unknown",\n    "... out",\n    "buildInformation": {\n      "buildRevision": "3a21814679",\n      "releaseLabel": "4.0.0"\n    }\n  }\n}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
&gt;                       status = value["status"]
E                       KeyError: 'status'

../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:130: KeyError</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_import_repo_page" time="0.001"><error message="failed on setup with &quot;KeyError: 'status'&quot;">@pytest.fixture(scope="session")
    def web_driver() -&gt; webdriver:
&gt;       web_driver = DriverFactory.get_web_driver(DRIVER_TYPE)

tests/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
utilities/driver/driver_factory.py:86: in get_web_driver
    return DriverFactory.__get_edge_driver(DriverFactory.__edge_options_default(options))
utilities/driver/driver_factory.py:63: in __get_edge_driver
    driver = webdriver.Remote(command_executor=HTTP_LOCALHOST_WD_HUB,
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ac084f850&gt;
response = {'status': 500, 'value': '{\n  "value": {\n    "additionalInformation": "Driver info: driver.version: unknown",\n    "... out",\n    "buildInformation": {\n      "buildRevision": "3a21814679",\n      "releaseLabel": "4.0.0"\n    }\n  }\n}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
&gt;                       status = value["status"]
E                       KeyError: 'status'

../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:130: KeyError</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_hello_world_page" time="0.001"><error message="failed on setup with &quot;KeyError: 'status'&quot;">@pytest.fixture(scope="session")
    def web_driver() -&gt; webdriver:
&gt;       web_driver = DriverFactory.get_web_driver(DRIVER_TYPE)

tests/conftest.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
utilities/driver/driver_factory.py:86: in get_web_driver
    return DriverFactory.__get_edge_driver(DriverFactory.__edge_options_default(options))
utilities/driver/driver_factory.py:63: in __get_edge_driver
    driver = webdriver.Remote(command_executor=HTTP_LOCALHOST_WD_HUB,
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5ac084f850&gt;
response = {'status': 500, 'value': '{\n  "value": {\n    "additionalInformation": "Driver info: driver.version: unknown",\n    "... out",\n    "buildInformation": {\n      "buildRevision": "3a21814679",\n      "releaseLabel": "4.0.0"\n    }\n  }\n}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
&gt;                       status = value["status"]
E                       KeyError: 'status'

../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:130: KeyError</error></testcase></testsuite></testsuites>