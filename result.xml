<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="7" time="79.014" timestamp="2021-11-08T19:54:07.544755" hostname="fv-az135-837"><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_is_git_repo_list_available" time="12.668" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_create_new_repo" time="5.053" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_import_repo_page" time="5.105" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_hello_world_page" time="6.500"><failure message="AssertionError: &#10;Expected: &lt;True&gt;&#10;     but: was &lt;False&gt;">self = &lt;tests.github_dashoboard_test.TestGitHubDashboard object at 0x7fccb7c29430&gt;
web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fccb7c04d90&gt;
github_guid_land_page = &lt;pages.github_pages.guides.guides_github_land_page.GuidesGitHubLandPage object at 0x7fccb7c29940&gt;

    def test_should_open_hello_world_page(self, web_driver, github_dashboard_page, github_guid_land_page):
        github_dashboard_page.open_url() \
            .click_read_guid_button()
        web_driver.switch_to.window(web_driver.window_handles[1])
        is_guide_url = github_guid_land_page.is_driver_set_proper_url()
        web_driver.close()
        web_driver.switch_to.window(web_driver.window_handles[0])
&gt;       assert_that(is_guide_url, equal_to(True))
E       AssertionError: 
E       Expected: &lt;True&gt;
E            but: was &lt;False&gt;

tests/github_dashoboard_test.py:35: AssertionError</failure></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_create_repo_form_introduce_yourself_activity" time="19.663"><failure message="selenium.common.exceptions.TimeoutException: Message: &#10;Stacktrace:&#10;#0 0x55a57291df93 &lt;unknown&gt;&#10;#1 0x55a5723f8908 &lt;unknown&gt;&#10;#2 0x55a57242e66a &lt;unknown&gt;&#10;#3 0x55a572460ff4 &lt;unknown&gt;&#10;#4 0x55a57244baad &lt;unknown&gt;&#10;#5 0x55a57245ec91 &lt;unknown&gt;&#10;#6 0x55a57244b973 &lt;unknown&gt;&#10;#7 0x55a572421df4 &lt;unknown&gt;&#10;#8 0x55a572422de5 &lt;unknown&gt;&#10;#9 0x55a57294d2be &lt;unknown&gt;&#10;#10 0x55a572962ba0 &lt;unknown&gt;&#10;#11 0x55a57294e215 &lt;unknown&gt;&#10;#12 0x55a572963fe8 &lt;unknown&gt;&#10;#13 0x55a5729429db &lt;unknown&gt;&#10;#14 0x55a57297f218 &lt;unknown&gt;&#10;#15 0x55a57297f398 &lt;unknown&gt;&#10;#16 0x55a57299a6cd &lt;unknown&gt;&#10;#17 0x7f14321ff609 &lt;unknown&gt;">self = &lt;tests.github_dashoboard_test.TestGitHubDashboard object at 0x7fccb7c299a0&gt;
web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fccb7c04d90&gt;
delete_all_repos = None

    def test_should_create_repo_form_introduce_yourself_activity(self, web_driver, github_dashboard_page,
                                                                 delete_all_repos):
        github_dashboard_page.click_continue_yourself_button() \
            .click_commit_new_file_button() \
            .get_file_web_element_by_file_name("README.md")
&gt;       repo = github_dashboard_page.open_url() \
            .repositories_list \
            .get_repo_by_name(Secrets.USERNAME, Secrets.USERNAME)

tests/github_dashoboard_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/github_pages/dashboard/repository_dashboard/repositories_page.py:28: in get_repo_by_name
    return super()._wait_for_visible_element(
pages/base_page.py:16: in _wait_for_visible_element
    return WebDriverWait(self.driver, time_seconds).until(EC.visibility_of_element_located(by_locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
method = &lt;function visibility_of_element_located.&lt;locals&gt;._predicate at 0x7fccb7b43dc0&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except InvalidSelectorException as e:
                raise e
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a57291df93 &lt;unknown&gt;
E       #1 0x55a5723f8908 &lt;unknown&gt;
E       #2 0x55a57242e66a &lt;unknown&gt;
E       #3 0x55a572460ff4 &lt;unknown&gt;
E       #4 0x55a57244baad &lt;unknown&gt;
E       #5 0x55a57245ec91 &lt;unknown&gt;
E       #6 0x55a57244b973 &lt;unknown&gt;
E       #7 0x55a572421df4 &lt;unknown&gt;
E       #8 0x55a572422de5 &lt;unknown&gt;
E       #9 0x55a57294d2be &lt;unknown&gt;
E       #10 0x55a572962ba0 &lt;unknown&gt;
E       #11 0x55a57294e215 &lt;unknown&gt;
E       #12 0x55a572963fe8 &lt;unknown&gt;
E       #13 0x55a5729429db &lt;unknown&gt;
E       #14 0x55a57297f218 &lt;unknown&gt;
E       #15 0x55a57297f398 &lt;unknown&gt;
E       #16 0x55a57299a6cd &lt;unknown&gt;
E       #17 0x7f14321ff609 &lt;unknown&gt;

../../../.local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException</failure></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_open_explore_repo_from_the_list" time="5.169"><failure message="selenium.common.exceptions.TimeoutException: Message:">self = &lt;tests.github_dashoboard_test.TestGitHubDashboard object at 0x7fccb7c29130&gt;
web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fccb7c04d90&gt;

    def test_open_explore_repo_from_the_list(self, web_driver, github_dashboard_page):
&gt;       repo_page = github_dashboard_page.explore_repos_page \
            .click_first_explore_repo_item()

tests/github_dashoboard_test.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/github_pages/dashboard/repository_dashboard/explore_repos_page.py:18: in click_first_explore_repo_item
    super()._wait_for_all_elements_visible(self.REPOSITORIES_ITEMS, 5)[0].click()
pages/base_page.py:40: in _wait_for_all_elements_visible
    return WebDriverWait(self.driver, time_seconds).until(EC.visibility_of_all_elements_located(by_locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
method = &lt;function visibility_of_all_elements_located.&lt;locals&gt;._predicate at 0x7fccb7b43c10&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except InvalidSelectorException as e:
                raise e
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

../../../.local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException</failure></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_open_explore_repos_dashboard_page" time="23.354"><failure message="selenium.common.exceptions.TimeoutException: Message: &#10;Stacktrace:&#10;#0 0x55a57291df93 &lt;unknown&gt;&#10;#1 0x55a5723f8908 &lt;unknown&gt;&#10;#2 0x55a57242e66a &lt;unknown&gt;&#10;#3 0x55a572460ff4 &lt;unknown&gt;&#10;#4 0x55a57244baad &lt;unknown&gt;&#10;#5 0x55a57245ec91 &lt;unknown&gt;&#10;#6 0x55a57244b973 &lt;unknown&gt;&#10;#7 0x55a572421df4 &lt;unknown&gt;&#10;#8 0x55a572422de5 &lt;unknown&gt;&#10;#9 0x55a57294d2be &lt;unknown&gt;&#10;#10 0x55a572962ba0 &lt;unknown&gt;&#10;#11 0x55a57294e215 &lt;unknown&gt;&#10;#12 0x55a572963fe8 &lt;unknown&gt;&#10;#13 0x55a5729429db &lt;unknown&gt;&#10;#14 0x55a57297f218 &lt;unknown&gt;&#10;#15 0x55a57297f398 &lt;unknown&gt;&#10;#16 0x55a57299a6cd &lt;unknown&gt;&#10;#17 0x7f14321ff609 &lt;unknown&gt;">self = &lt;tests.github_dashoboard_test.TestGitHubDashboard object at 0x7fccb7b149a0&gt;
web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fccb7c04d90&gt;
search_and_open_repo = None

    def test_open_explore_repos_dashboard_page(self, web_driver, github_dashboard_page, search_and_open_repo):
&gt;       explore_dashboard_page = github_dashboard_page.open_url() \
            .explore_repos_page \
            .click_explore_more()

tests/github_dashoboard_test.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages/github_pages/dashboard/repository_dashboard/explore_repos_page.py:22: in click_explore_more
    super()._wait_for_visible_element(self.EXPLORE_MORE_BUTTON, 5).click()
pages/base_page.py:16: in _wait_for_visible_element
    return WebDriverWait(self.driver, time_seconds).until(EC.visibility_of_element_located(by_locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="c04d33feaba4e81cd0b28bc8d3a1682e")&gt;
method = &lt;function visibility_of_element_located.&lt;locals&gt;._predicate at 0x7fccb7b68af0&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except InvalidSelectorException as e:
                raise e
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x55a57291df93 &lt;unknown&gt;
E       #1 0x55a5723f8908 &lt;unknown&gt;
E       #2 0x55a57242e66a &lt;unknown&gt;
E       #3 0x55a572460ff4 &lt;unknown&gt;
E       #4 0x55a57244baad &lt;unknown&gt;
E       #5 0x55a57245ec91 &lt;unknown&gt;
E       #6 0x55a57244b973 &lt;unknown&gt;
E       #7 0x55a572421df4 &lt;unknown&gt;
E       #8 0x55a572422de5 &lt;unknown&gt;
E       #9 0x55a57294d2be &lt;unknown&gt;
E       #10 0x55a572962ba0 &lt;unknown&gt;
E       #11 0x55a57294e215 &lt;unknown&gt;
E       #12 0x55a572963fe8 &lt;unknown&gt;
E       #13 0x55a5729429db &lt;unknown&gt;
E       #14 0x55a57297f218 &lt;unknown&gt;
E       #15 0x55a57297f398 &lt;unknown&gt;
E       #16 0x55a57299a6cd &lt;unknown&gt;
E       #17 0x7f14321ff609 &lt;unknown&gt;

../../../.local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException</failure></testcase></testsuite></testsuites>