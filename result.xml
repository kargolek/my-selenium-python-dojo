<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="31" time="160.342" timestamp="2021-11-18T17:21:52.886211" hostname="fv-az123-808"><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_name_author_should_match" time="18.716" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_public_as_default" time="5.276" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_clone_default_url" time="5.269" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_readme_file" time="8.552" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_gitignore" time="8.866" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_license_file" time="8.724" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_privacy_private" time="7.688" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_not_create_if_name_exist" time="6.273" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_description_match" time="8.935" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_open_import_repo_page" time="0.876" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_input_name_should_indicate_name_with_white_spaces" time="1.175" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_input_name_should_indicate_name_with_special_char" time="1.135" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_input_name_by_click_inspiration_name" time="0.620" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_should_throw_notification_for_repo_creation_failed" time="9.138" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_should_open_readme_learn_more" time="2.361" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_should_open_gitignore_learn_more" time="1.493" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_should_open_license_learn_more" time="1.645" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_should_open_repo_settings" time="1.259" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_is_git_repo_list_available" time="7.901" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_create_new_repo" time="2.611" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_create_new_repo_when_repo_exist" time="2.559" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_import_repo_page" time="3.597" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_hello_world_read_guide_page" time="1.493" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_create_repo_form_introduce_yourself_activity" time="6.936" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_open_explore_repos_dashboard_page" time="2.038" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_exact_name_one_match" time="13.934"><error message="failed on setup with &quot;fixtures.fixtures_exception.FixturesException: Unable to create test_2 repo in GitHubFixtures&quot;">web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="0f52a7381fe7986d02a35727cb1f1693")&gt;
github_api_service = &lt;utilities.api.github.github_api_service.GitHubApiService object at 0x7f39c21e96d0&gt;
github_fixtures = &lt;fixtures.github.github_fixtures.GitHubFixtures object at 0x7f39c2234100&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7f39c2234df0&gt;
github_create_new_repo_page = &lt;pages.github_pages.create.new.github_create_new_repo_page.GitHubCreateNewRepoPage object at 0x7f39c22346a0&gt;

    @pytest.fixture()
    def create_repos_test_1_and_test_2_if_not_exist(web_driver, github_api_service, github_fixtures,
                                                    github_dashboard_page, github_create_new_repo_page):
        repos = github_fixtures.create_public_repo_if_not_exist("test_1",
                                                                github_api_service,
                                                                github_dashboard_page)
&gt;       github_fixtures.create_public_repo_if_not_exist("test_2",
                                                        github_api_service,
                                                        github_dashboard_page,
                                                        repos_on_account=repos)

tests/conftest.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;fixtures.github.github_fixtures.GitHubFixtures object at 0x7f39c2234100&gt;
repo_name = 'test_2'
github_api_service = &lt;utilities.api.github.github_api_service.GitHubApiService object at 0x7f39c21e96d0&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7f39c2234df0&gt;
repos_on_account = &lt;github.PaginatedList.PaginatedList object at 0x7f39c205af10&gt;

    def create_public_repo_if_not_exist(self, repo_name: str, github_api_service: GitHubApiService,
                                        github_dashboard_page: GitHubDashboardPage,
                                        repos_on_account: PaginatedList = None):
        if repos_on_account is None:
            repos = github_api_service.get_repos()
        else:
            repos = repos_on_account
        filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
        if repo_name not in filtered_repos:
            github_api_service.api_call_create_repo(repo_name)
            if not github_dashboard_page.open_url().repositories_list \
                    .is_repo_name_exist_on_the_list(Secrets.USERNAME, repo_name):
&gt;               raise FixturesException(f"Unable to create {repo_name} repo in {self.__class__.__name__}")
E               fixtures.fixtures_exception.FixturesException: Unable to create test_2 repo in GitHubFixtures

fixtures/github/github_fixtures.py:68: FixturesException</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_one_match" time="1.856" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_multi_match" time="1.305" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_not_match" time="1.798" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_start_a_project_should_open_new_repo_page" time="1.021" /><testcase classname="tests.github_profile_page_test.TestGitHubProfilePage" name="test_edit_profile_should_save_all_details" time="7.504" /></testsuite></testsuites>