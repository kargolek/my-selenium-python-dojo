<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="20" time="279.908" timestamp="2021-11-11T21:53:53.772816" hostname="fv-az74-755"><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_name_author_should_match" time="17.673" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_public_as_default" time="7.006" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_clone_default_url" time="6.967" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_license_file" time="20.490"><failure message="selenium.common.exceptions.TimeoutException: Message: &#10;Stacktrace:&#10;#0 0x5649c0c15f93 &lt;unknown&gt;&#10;#1 0x5649c06f0908 &lt;unknown&gt;&#10;#2 0x5649c072666a &lt;unknown&gt;&#10;#3 0x5649c0758ff4 &lt;unknown&gt;&#10;#4 0x5649c0743aad &lt;unknown&gt;&#10;#5 0x5649c0756c91 &lt;unknown&gt;&#10;#6 0x5649c0743973 &lt;unknown&gt;&#10;#7 0x5649c0719df4 &lt;unknown&gt;&#10;#8 0x5649c071ade5 &lt;unknown&gt;&#10;#9 0x5649c0c452be &lt;unknown&gt;&#10;#10 0x5649c0c5aba0 &lt;unknown&gt;&#10;#11 0x5649c0c46215 &lt;unknown&gt;&#10;#12 0x5649c0c5bfe8 &lt;unknown&gt;&#10;#13 0x5649c0c3a9db &lt;unknown&gt;&#10;#14 0x5649c0c77218 &lt;unknown&gt;&#10;#15 0x5649c0c77398 &lt;unknown&gt;&#10;#16 0x5649c0c926cd &lt;unknown&gt;&#10;#17 0x7f0a103e3609 &lt;unknown&gt;">self = &lt;tests.github_create_repo_test.TestGitHubCreateRepo object at 0x7fe84dea25e0&gt;
github_create_new_repo_page = &lt;pages.github_pages.create.new.github_create_new_repo_page.GitHubCreateNewRepoPage object at 0x7fe84df1ba30&gt;
github_repo_main_page = &lt;pages.github_pages.repository.github_repo_main_page.GitHubRepoMainPage object at 0x7fe84df1bd30&gt;
random_string = 'cb82d68ae8'

    def test_create_repo_should_match_license_file(self, github_create_new_repo_page, github_repo_main_page,
                                                   random_string):
        repo_name = f"test_repo_{random_string}"
        license_type = "MIT License"
        github_create_new_repo_page.open_url().create_repo_details_page \
            .input_repo_name(repo_name)
&gt;       content_view_page = github_create_new_repo_page.click_choose_license_checkbox() \
            .click_select_license_dropdown() \
            .click_license_type_dropdown_item(license_type) \
            .click_create_repository_button() \
            .content_list_page.click_file_by_name("LICENSE")

tests/github_create_repo_test.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
utilities/logger/test_logger/test_step.py:28: in impl
    params = func(*args, **kw)
pages/github_pages/repository/code/github_content_list_page.py:25: in click_file_by_name
    self.get_file_web_element_by_file_name(file_name).click()
utilities/logger/test_logger/test_step.py:28: in impl
    params = func(*args, **kw)
pages/github_pages/repository/code/github_content_list_page.py:20: in get_file_web_element_by_file_name
    return self._wait_for_visible_element(
pages/base_page.py:16: in _wait_for_visible_element
    return WebDriverWait(self.driver, time_seconds).until(EC.visibility_of_element_located(by_locator))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="b944f4ee264ebb7a5682e321f39e6320")&gt;
method = &lt;function visibility_of_element_located.&lt;locals&gt;._predicate at 0x7fe84dfa8f70&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except InvalidSelectorException as e:
                raise e
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x5649c0c15f93 &lt;unknown&gt;
E       #1 0x5649c06f0908 &lt;unknown&gt;
E       #2 0x5649c072666a &lt;unknown&gt;
E       #3 0x5649c0758ff4 &lt;unknown&gt;
E       #4 0x5649c0743aad &lt;unknown&gt;
E       #5 0x5649c0756c91 &lt;unknown&gt;
E       #6 0x5649c0743973 &lt;unknown&gt;
E       #7 0x5649c0719df4 &lt;unknown&gt;
E       #8 0x5649c071ade5 &lt;unknown&gt;
E       #9 0x5649c0c452be &lt;unknown&gt;
E       #10 0x5649c0c5aba0 &lt;unknown&gt;
E       #11 0x5649c0c46215 &lt;unknown&gt;
E       #12 0x5649c0c5bfe8 &lt;unknown&gt;
E       #13 0x5649c0c3a9db &lt;unknown&gt;
E       #14 0x5649c0c77218 &lt;unknown&gt;
E       #15 0x5649c0c77398 &lt;unknown&gt;
E       #16 0x5649c0c926cd &lt;unknown&gt;
E       #17 0x7f0a103e3609 &lt;unknown&gt;

../../../.local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException</failure></testcase><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_readme_file" time="11.846" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_gitignore" time="11.671" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_privacy_private" time="10.216" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_not_create_if_name_exist" time="8.167" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_description_match" time="10.264" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_open_import_repo_page" time="0.946" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_is_git_repo_list_available" time="78.409" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_create_new_repo" time="5.639" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_import_repo_page" time="5.676" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_hello_world_read_guide_page" time="1.443" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_create_repo_form_introduce_yourself_activity" time="11.112" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_open_explore_repos_dashboard_page" time="1.799" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_exact_name_one_match" time="27.035" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_one_match" time="3.753" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_multi_match" time="3.264" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_not_match" time="31.533" /></testsuite></testsuites>