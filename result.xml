<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="4" failures="0" skipped="0" tests="20" time="221.523" timestamp="2021-11-13T03:02:40.941873" hostname="fv-az83-423"><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_name_author_should_match" time="20.796" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_public_as_default" time="7.886" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_clone_default_url" time="8.042" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_license_file" time="12.110" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_readme_file" time="11.163" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_gitignore" time="12.079" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_match_privacy_private" time="10.575" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_not_create_if_name_exist" time="9.065" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_description_match" time="11.034" /><testcase classname="tests.github_create_repo_test.TestGitHubCreateRepo" name="test_create_repo_should_open_import_repo_page" time="0.952" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_is_git_repo_list_available" time="1.048" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_create_new_repo" time="64.781" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_import_repo_page" time="2.504" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_open_hello_world_read_guide_page" time="1.674" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_should_create_repo_form_introduce_yourself_activity" time="6.096" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_open_explore_repos_dashboard_page" time="1.774" /><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_exact_name_one_match" time="0.025"><error message="failed on setup with &quot;github.GithubException.GithubException: 401 {&quot;message&quot;: &quot;Requires authentication&quot;, &quot;documentation_url&quot;: &quot;https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user&quot;}&quot;">web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="4a5e43af7196cfbc4ac405e9ca1861c8")&gt;
github_api_service = &lt;utilities.api.github.github_api_service.GitHubApiService object at 0x7fa7e81399d0&gt;
github_fixtures = &lt;fixtures.github.github_fixtures.GitHubFixtures object at 0x7fa7e819e6d0&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fa7e8139130&gt;
github_create_new_repo_page = &lt;pages.github_pages.create.new.github_create_new_repo_page.GitHubCreateNewRepoPage object at 0x7fa7e8139880&gt;

    @pytest.fixture()
    def create_repos_test_1_and_test_2_if_not_exist(web_driver, github_api_service,
                                                    github_fixtures, github_dashboard_page, github_create_new_repo_page):
&gt;       repos = github_fixtures.create_public_repo_if_not_exist("test_1", github_api_service, github_dashboard_page)

tests/conftest.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fixtures/github/github_fixtures.py:63: in create_public_repo_if_not_exist
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
fixtures/github/github_fixtures.py:63: in &lt;listcomp&gt;
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:56: in __iter__
    newElements = self._grow()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:67: in _grow
    newElements = self._fetchNextPage()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:199: in _fetchNextPage
    headers, data = self.__requester.requestJsonAndCheck(
../../../.local/lib/python3.8/site-packages/github/Requester.py:353: in requestJsonAndCheck
    return self.__check(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;github.Requester.Requester object at 0x7fa7e8139c70&gt;, status = 401
responseHeaders = {'access-control-allow-origin': '*', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP...GitHub-Media-Type, Deprecation, Sunset', 'content-length': '149', 'content-security-policy': "default-src 'none'", ...}
output = {'documentation_url': 'https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user', 'message': 'Requires authentication'}

    def __check(self, status, responseHeaders, output):
        output = self.__structuredFromJson(output)
        if status &gt;= 400:
&gt;           raise self.__createException(status, responseHeaders, output)
E           github.GithubException.GithubException: 401 {"message": "Requires authentication", "documentation_url": "https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user"}

../../../.local/lib/python3.8/site-packages/github/Requester.py:378: GithubException</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_one_match" time="0.024"><error message="failed on setup with &quot;github.GithubException.GithubException: 401 {&quot;message&quot;: &quot;Requires authentication&quot;, &quot;documentation_url&quot;: &quot;https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user&quot;}&quot;">web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="4a5e43af7196cfbc4ac405e9ca1861c8")&gt;
github_api_service = &lt;utilities.api.github.github_api_service.GitHubApiService object at 0x7fa7e81399d0&gt;
github_fixtures = &lt;fixtures.github.github_fixtures.GitHubFixtures object at 0x7fa7e819e6d0&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fa7e8139130&gt;
github_create_new_repo_page = &lt;pages.github_pages.create.new.github_create_new_repo_page.GitHubCreateNewRepoPage object at 0x7fa7e8139880&gt;

    @pytest.fixture()
    def create_repos_test_1_and_test_2_if_not_exist(web_driver, github_api_service,
                                                    github_fixtures, github_dashboard_page, github_create_new_repo_page):
&gt;       repos = github_fixtures.create_public_repo_if_not_exist("test_1", github_api_service, github_dashboard_page)

tests/conftest.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fixtures/github/github_fixtures.py:63: in create_public_repo_if_not_exist
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
fixtures/github/github_fixtures.py:63: in &lt;listcomp&gt;
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:56: in __iter__
    newElements = self._grow()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:67: in _grow
    newElements = self._fetchNextPage()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:199: in _fetchNextPage
    headers, data = self.__requester.requestJsonAndCheck(
../../../.local/lib/python3.8/site-packages/github/Requester.py:353: in requestJsonAndCheck
    return self.__check(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;github.Requester.Requester object at 0x7fa7e8139c70&gt;, status = 401
responseHeaders = {'access-control-allow-origin': '*', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP...GitHub-Media-Type, Deprecation, Sunset', 'content-length': '149', 'content-security-policy': "default-src 'none'", ...}
output = {'documentation_url': 'https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user', 'message': 'Requires authentication'}

    def __check(self, status, responseHeaders, output):
        output = self.__structuredFromJson(output)
        if status &gt;= 400:
&gt;           raise self.__createException(status, responseHeaders, output)
E           github.GithubException.GithubException: 401 {"message": "Requires authentication", "documentation_url": "https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user"}

../../../.local/lib/python3.8/site-packages/github/Requester.py:378: GithubException</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_multi_match" time="0.026"><error message="failed on setup with &quot;github.GithubException.GithubException: 401 {&quot;message&quot;: &quot;Requires authentication&quot;, &quot;documentation_url&quot;: &quot;https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user&quot;}&quot;">web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="4a5e43af7196cfbc4ac405e9ca1861c8")&gt;
github_api_service = &lt;utilities.api.github.github_api_service.GitHubApiService object at 0x7fa7e81399d0&gt;
github_fixtures = &lt;fixtures.github.github_fixtures.GitHubFixtures object at 0x7fa7e819e6d0&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fa7e8139130&gt;
github_create_new_repo_page = &lt;pages.github_pages.create.new.github_create_new_repo_page.GitHubCreateNewRepoPage object at 0x7fa7e8139880&gt;

    @pytest.fixture()
    def create_repos_test_1_and_test_2_if_not_exist(web_driver, github_api_service,
                                                    github_fixtures, github_dashboard_page, github_create_new_repo_page):
&gt;       repos = github_fixtures.create_public_repo_if_not_exist("test_1", github_api_service, github_dashboard_page)

tests/conftest.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fixtures/github/github_fixtures.py:63: in create_public_repo_if_not_exist
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
fixtures/github/github_fixtures.py:63: in &lt;listcomp&gt;
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:56: in __iter__
    newElements = self._grow()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:67: in _grow
    newElements = self._fetchNextPage()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:199: in _fetchNextPage
    headers, data = self.__requester.requestJsonAndCheck(
../../../.local/lib/python3.8/site-packages/github/Requester.py:353: in requestJsonAndCheck
    return self.__check(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;github.Requester.Requester object at 0x7fa7e8139c70&gt;, status = 401
responseHeaders = {'access-control-allow-origin': '*', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP...GitHub-Media-Type, Deprecation, Sunset', 'content-length': '149', 'content-security-policy': "default-src 'none'", ...}
output = {'documentation_url': 'https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user', 'message': 'Requires authentication'}

    def __check(self, status, responseHeaders, output):
        output = self.__structuredFromJson(output)
        if status &gt;= 400:
&gt;           raise self.__createException(status, responseHeaders, output)
E           github.GithubException.GithubException: 401 {"message": "Requires authentication", "documentation_url": "https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user"}

../../../.local/lib/python3.8/site-packages/github/Requester.py:378: GithubException</error></testcase><testcase classname="tests.github_dashoboard_test.TestGitHubDashboard" name="test_find_repo_by_partial_name_not_match" time="16.707"><error message="failed on setup with &quot;github.GithubException.GithubException: 401 {&quot;message&quot;: &quot;Requires authentication&quot;, &quot;documentation_url&quot;: &quot;https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user&quot;}&quot;">web_driver = &lt;selenium.webdriver.remote.webdriver.WebDriver (session="50364388aa577898687269e00bfa6877")&gt;
github_api_service = &lt;utilities.api.github.github_api_service.GitHubApiService object at 0x7fa7e80a3d30&gt;
github_fixtures = &lt;fixtures.github.github_fixtures.GitHubFixtures object at 0x7fa7e817f100&gt;
github_dashboard_page = &lt;pages.github_pages.dashboard.github_dashboard_page.GitHubDashboardPage object at 0x7fa7e80a3880&gt;
github_create_new_repo_page = &lt;pages.github_pages.create.new.github_create_new_repo_page.GitHubCreateNewRepoPage object at 0x7fa7e80a3df0&gt;

    @pytest.fixture()
    def create_repos_test_1_and_test_2_if_not_exist(web_driver, github_api_service,
                                                    github_fixtures, github_dashboard_page, github_create_new_repo_page):
&gt;       repos = github_fixtures.create_public_repo_if_not_exist("test_1", github_api_service, github_dashboard_page)

tests/conftest.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fixtures/github/github_fixtures.py:63: in create_public_repo_if_not_exist
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
fixtures/github/github_fixtures.py:63: in &lt;listcomp&gt;
    filtered_repos = [repo.name for repo in repos if repo.name == repo_name]
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:56: in __iter__
    newElements = self._grow()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:67: in _grow
    newElements = self._fetchNextPage()
../../../.local/lib/python3.8/site-packages/github/PaginatedList.py:199: in _fetchNextPage
    headers, data = self.__requester.requestJsonAndCheck(
../../../.local/lib/python3.8/site-packages/github/Requester.py:353: in requestJsonAndCheck
    return self.__check(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;github.Requester.Requester object at 0x7fa7e80a3f10&gt;, status = 401
responseHeaders = {'access-control-allow-origin': '*', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP...GitHub-Media-Type, Deprecation, Sunset', 'content-length': '149', 'content-security-policy': "default-src 'none'", ...}
output = {'documentation_url': 'https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user', 'message': 'Requires authentication'}

    def __check(self, status, responseHeaders, output):
        output = self.__structuredFromJson(output)
        if status &gt;= 400:
&gt;           raise self.__createException(status, responseHeaders, output)
E           github.GithubException.GithubException: 401 {"message": "Requires authentication", "documentation_url": "https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user"}

../../../.local/lib/python3.8/site-packages/github/Requester.py:378: GithubException</error></testcase></testsuite></testsuites>